
 <Alert severity="error">This is an error message!</Alert>
  <Alert severity="warning">This is a warning message!</Alert>
<Alert severity="info">This is an information message!</Alert>

*********************************************************
*********************************************************

 <Button variant="outlined" onClick={handleClick}>
        Open success snackbar
      </Button>
      
****************************************************
****************************************************
const walletReducer = (state: IState, action: WalletAction) => {
  switch (action.type) {
    case "getAdress":
      return {
        ...state,
        pubKey: address,
      };
    case "getBalance":
      return {
        ...state,
        balance:
          state.balance === 0 ? state.balance + action.payload : action.payload,
      };
    case "fund":
      return {
        ...state,
        severity: action.payload.type,
        message: action.payload.message
      };
    case 'severity':
      return {
        ...state,
        severity: action.payload.type,
        message: action.payload.message
      };
    case "transfer":
      return {
        ...state,
        balance: state.balance - action.payload,
      };
    case "isFetching":
      return {
        ...state,
        isFetching: !state.isFetching,
      };
    case "setTxSignatureNull":
      return {
        ...state,
        txSignatureNull: null,
      };
    case "setTxSignature":
      return {
        ...state,
        txSignature: action.payload,
      };
    default:
      return state;
  }

**************************************************
**************************************************


import React, { useState } from "react";
import {
  Connection,
  PublicKey,
  SystemProgram,
  Transaction,
  Keypair,
  sendAndConfirmTransaction,
} from "@solana/web3.js";


import { getNodeRpcURL, getTxExplorerURL, getNodeWsURL } from "../lib/utils";

const Transfer = ({ keypair }) => {
  const [toAddress, setToAddress] = useState(null);
  const [error, setError] = useState(null);
  const [fetching, setFetching] = useState(false);
  const [txSignature, setTxSignature] = useState(null);

  const generate = () => {
    const keypair = Keypair.generate();
    const address = keypair.publicKey.toString();
    setToAddress(address);
  };

  const transfer = (values) => {
    const amountNumber = parseFloat(values.amount);

    if (isNaN(amountNumber)) {
      setError("Amount needs to be a valid number");
    }

    const url = getNodeRpcURL();
    const connection = new Connection(url, { wsEndpoint: getNodeWsURL() });

    const fromPubKey = new PublicKey(values.from);
    const toPubKey = new PublicKey(toAddress);

    const instructions = SystemProgram.transfer({
      fromPubkey: fromPubKey,
      toPubkey: toPubKey,
      lamports: amountNumber,
    });

    const signers = [
      {
        publicKey: fromPubKey,
        secretKey: new Uint8Array(keypair.secretKey),
      },
    ];

    setTxSignature(null);
    setFetching(true);

    // Create a transaction
    // Add instructions
    // Call sendAndConfirmTransaction
    // On success, call setTxSignature and setFetching
    const transaction = new Transaction().add(instructions);
    setTxSignature(null);
    setFetching(true);
    sendAndConfirmTransaction(connection, transaction, signers)
      .then((signature) => {
        setTxSignature(signature);
        setFetching(false);
      })
      .catch((error) => {
        console.log(error);
        setFetching(false);
      });
    console.log(values);
  };

  const explorerUrl = getTxExplorerURL(txSignature);

  return (
    <Form
      {...layout}
      name="transfer"
      layout="horizontal"
      onFinish={transfer}
      initialValues={{
        from: keypair.publicKey.toString(),
      }}
    >
      <Form.Item label="Sender" name="from" required>
        <Text code>{keypair.publicKey.toString()}</Text>
      </Form.Item>

      <Form.Item
        label="Amount"
        name="amount"
        required
        tooltip="1 lamport = 0.000000001 SOL"
      >
        <Space direction="vertical">
          <Input suffix="lamports" style={{ width: "200px" }} />
        </Space>
      </Form.Item>

      <Form.Item label="Recipient" required>
        <Space direction="horizontal">
          {toAddress && <Text code>{toAddress}</Text>}
          <Button
            size="small"
            type="dashed"
            onClick={generate}
            icon={<RedoOutlined />}
          >
            Generate an address
          </Button>
        </Space>
      </Form.Item>

      <Form.Item {...tailLayout}>
        <Button type="primary" htmlType="submit" disabled={fetching}>
          Submit Transfer
        </Button>
      </Form.Item>

      {fetching && (
        <Form.Item {...tailLayout}>
          <Space size="large">
            <LoadingOutlined style={{ fontSize: 24, color: "#1890ff" }} spin />
            <Text type="secondary">
              Transfer initiated. Waiting for confirmations...
            </Text>
          </Space>
        </Form.Item>
      )}

      {txSignature && (
        <Form.Item {...tailLayout}>
          <Alert
            type="success"
            showIcon
            message={<Text strong>Transfer confirmed!</Text>}
            description={
              <a href={explorerUrl} target="_blank" rel="noreferrer">
                View on Solana Explorer
              </a>
            }
          />
        </Form.Item>
      )}

      {error && (
        <Form.Item {...tailLayout}>
          <Alert
            type="error"
            showIcon
            closable
            message={error}
            onClose={() => setError(null)}
          />
        </Form.Item>
      )}
    </Form>
  );
};

export default Transfer;

// CLI https://docs.solana.com/cli/transfer-tokens#transfer-tokens-from-your-first-wallet-to-the-second-address

// Random example code from Google https://githubmemory.com/repo/1Crazymoney/math-solana-js
// web3.js docs https://solana-labs.github.io/solana-web3.js/modules.html#sendandconfirmtransaction

// SEE lib/transfer.js for working code










const fund = () => {
    const url = process.env.REACT_APP_DEVNET_URL;
    const connection = new Connection(url as string);

    // Create a PublicKey address from the input value
    // Call requestAirdrop
    // On success, set isFunded to true
    console.log(state.pubKey);
    const myAddress = new PublicKey(state.pubKey);
    console.log(myAddress);
    connection
      .requestAirdrop(myAddress, 10000000000)
      .then((res) => {
        dispatch({ type: "fund" });
      })
      .catch((error) => {
        dispatch({ type: "error" });
        console.log(error);
      });
  };

  ***********************************************
  	https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/solana/info/logo.png